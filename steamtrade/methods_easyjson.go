// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package steamtrade

import (
	json "encoding/json"
	go_steamapi "github.com/Philipp15b/go-steamapi"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9f911648DecodeSteamtrade(in *jlexer.Lexer, out *ResponseGetOfferList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "offers":
			if in.IsNull() {
				in.Skip()
				out.Offers = nil
			} else {
				in.Delim('[')
				if out.Offers == nil {
					if !in.IsDelim(']') {
						out.Offers = make([]*go_steamapi.CEconTradeOffer, 0, 8)
					} else {
						out.Offers = []*go_steamapi.CEconTradeOffer{}
					}
				} else {
					out.Offers = (out.Offers)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *go_steamapi.CEconTradeOffer
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(go_steamapi.CEconTradeOffer)
						}
						easyjson9f911648DecodeGithubComPhilipp15bGoSteamapi(in, &*v1)
					}
					out.Offers = append(out.Offers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			out.Status = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f911648EncodeSteamtrade(out *jwriter.Writer, in ResponseGetOfferList) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"offers\":")
	if in.Offers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Offers {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				easyjson9f911648EncodeGithubComPhilipp15bGoSteamapi(out, *v3)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"status\":")
	out.String(string(in.Status))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"description\":")
	out.String(string(in.Description))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseGetOfferList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f911648EncodeSteamtrade(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseGetOfferList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f911648EncodeSteamtrade(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseGetOfferList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f911648DecodeSteamtrade(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseGetOfferList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f911648DecodeSteamtrade(l, v)
}
func easyjson9f911648DecodeGithubComPhilipp15bGoSteamapi(in *jlexer.Lexer, out *go_steamapi.CEconTradeOffer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TradeOfferID":
			out.TradeOfferID = uint64(in.Uint64Str())
		case "accountid_other":
			out.OtherAccountID = uint64(in.Uint64())
		case "Message":
			out.Message = string(in.String())
		case "expiration_time":
			out.ExpirationTime = uint32(in.Uint32())
		case "trade_offer_state":
			out.State = go_steamapi.State(in.Uint())
		case "items_to_give":
			if in.IsNull() {
				in.Skip()
				out.ToGive = nil
			} else {
				in.Delim('[')
				if out.ToGive == nil {
					if !in.IsDelim(']') {
						out.ToGive = make([]*go_steamapi.CEconAsset, 0, 8)
					} else {
						out.ToGive = []*go_steamapi.CEconAsset{}
					}
				} else {
					out.ToGive = (out.ToGive)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *go_steamapi.CEconAsset
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(go_steamapi.CEconAsset)
						}
						easyjson9f911648DecodeGithubComPhilipp15bGoSteamapi1(in, &*v4)
					}
					out.ToGive = append(out.ToGive, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "items_to_receive":
			if in.IsNull() {
				in.Skip()
				out.ToReceive = nil
			} else {
				in.Delim('[')
				if out.ToReceive == nil {
					if !in.IsDelim(']') {
						out.ToReceive = make([]*go_steamapi.CEconAsset, 0, 8)
					} else {
						out.ToReceive = []*go_steamapi.CEconAsset{}
					}
				} else {
					out.ToReceive = (out.ToReceive)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *go_steamapi.CEconAsset
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(go_steamapi.CEconAsset)
						}
						easyjson9f911648DecodeGithubComPhilipp15bGoSteamapi1(in, &*v5)
					}
					out.ToReceive = append(out.ToReceive, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_our_offer":
			out.IsOurs = bool(in.Bool())
		case "time_created":
			out.TimeCreated = uint32(in.Uint32())
		case "time_updated":
			out.TimeUpdated = uint32(in.Uint32())
		case "from_real_time_trade":
			out.FromRealTimeTrade = bool(in.Bool())
		case "escrow_end_date":
			out.EscrowEndDate = uint32(in.Uint32())
		case "confirmation_method":
			out.ConfirmationMethod = go_steamapi.ConfirmationMethod(in.Int())
		case "tradeid":
			out.TradeID = uint64(in.Uint64Str())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f911648EncodeGithubComPhilipp15bGoSteamapi(out *jwriter.Writer, in go_steamapi.CEconTradeOffer) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"TradeOfferID\":")
	out.Uint64Str(uint64(in.TradeOfferID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"accountid_other\":")
	out.Uint64(uint64(in.OtherAccountID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Message\":")
	out.String(string(in.Message))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"expiration_time\":")
	out.Uint32(uint32(in.ExpirationTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"trade_offer_state\":")
	out.Uint(uint(in.State))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"items_to_give\":")
	if in.ToGive == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v6, v7 := range in.ToGive {
			if v6 > 0 {
				out.RawByte(',')
			}
			if v7 == nil {
				out.RawString("null")
			} else {
				easyjson9f911648EncodeGithubComPhilipp15bGoSteamapi1(out, *v7)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"items_to_receive\":")
	if in.ToReceive == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in.ToReceive {
			if v8 > 0 {
				out.RawByte(',')
			}
			if v9 == nil {
				out.RawString("null")
			} else {
				easyjson9f911648EncodeGithubComPhilipp15bGoSteamapi1(out, *v9)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"is_our_offer\":")
	out.Bool(bool(in.IsOurs))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"time_created\":")
	out.Uint32(uint32(in.TimeCreated))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"time_updated\":")
	out.Uint32(uint32(in.TimeUpdated))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"from_real_time_trade\":")
	out.Bool(bool(in.FromRealTimeTrade))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"escrow_end_date\":")
	out.Uint32(uint32(in.EscrowEndDate))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"confirmation_method\":")
	out.Int(int(in.ConfirmationMethod))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tradeid\":")
	out.Uint64Str(uint64(in.TradeID))
	out.RawByte('}')
}
func easyjson9f911648DecodeGithubComPhilipp15bGoSteamapi1(in *jlexer.Lexer, out *go_steamapi.CEconAsset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AppID":
			out.AppID = uint(in.UintStr())
		case "ContextID":
			out.ContextID = uint64(in.Uint64Str())
		case "AssetID":
			out.AssetID = uint64(in.Uint64Str())
		case "CurrencyID":
			out.CurrencyID = uint64(in.Uint64Str())
		case "ClassID":
			out.ClassID = uint64(in.Uint64Str())
		case "InstanceID":
			out.InstanceID = uint64(in.Uint64Str())
		case "Amount":
			out.Amount = uint64(in.Uint64Str())
		case "Missing":
			out.Missing = bool(in.Bool())
		case "MarketHashName":
			out.MarketHashName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f911648EncodeGithubComPhilipp15bGoSteamapi1(out *jwriter.Writer, in go_steamapi.CEconAsset) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"AppID\":")
	out.UintStr(uint(in.AppID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ContextID\":")
	out.Uint64Str(uint64(in.ContextID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"AssetID\":")
	out.Uint64Str(uint64(in.AssetID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CurrencyID\":")
	out.Uint64Str(uint64(in.CurrencyID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ClassID\":")
	out.Uint64Str(uint64(in.ClassID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"InstanceID\":")
	out.Uint64Str(uint64(in.InstanceID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Amount\":")
	out.Uint64Str(uint64(in.Amount))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Missing\":")
	out.Bool(bool(in.Missing))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"MarketHashName\":")
	out.String(string(in.MarketHashName))
	out.RawByte('}')
}
func easyjson9f911648DecodeSteamtrade1(in *jlexer.Lexer, out *ResponseGetOffer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "offer":
			if in.IsNull() {
				in.Skip()
				out.Offer = nil
			} else {
				if out.Offer == nil {
					out.Offer = new(go_steamapi.CEconTradeOffer)
				}
				easyjson9f911648DecodeGithubComPhilipp15bGoSteamapi(in, &*out.Offer)
			}
		case "status":
			out.Status = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f911648EncodeSteamtrade1(out *jwriter.Writer, in ResponseGetOffer) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"offer\":")
	if in.Offer == nil {
		out.RawString("null")
	} else {
		easyjson9f911648EncodeGithubComPhilipp15bGoSteamapi(out, *in.Offer)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"status\":")
	out.String(string(in.Status))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"description\":")
	out.String(string(in.Description))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseGetOffer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f911648EncodeSteamtrade1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseGetOffer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f911648EncodeSteamtrade1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseGetOffer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f911648DecodeSteamtrade1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseGetOffer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f911648DecodeSteamtrade1(l, v)
}
func easyjson9f911648DecodeSteamtrade2(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f911648EncodeSteamtrade2(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"status\":")
	out.String(string(in.Status))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"description\":")
	out.String(string(in.Description))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f911648EncodeSteamtrade2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f911648EncodeSteamtrade2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f911648DecodeSteamtrade2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f911648DecodeSteamtrade2(l, v)
}
